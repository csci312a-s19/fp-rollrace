import { findMapSpan, buildMapHashtable } from './MapParser.js';

describe('findMapSpan tests', () => {
  test('Single start point', () => {
    expect(findMapSpan(['m 2340 100'])).toBe(2340);
  });

  test('All zero', () => {
    expect(findMapSpan(['m 0 0'])).toBe(0);
  });

  test('Regular short map', () => {
    expect(findMapSpan(['m 100 0 h 511 v -111 h 159 v 175 h 206 v -127'])).toBe(
      976
    );
  });

  test('Short map', () => {
    expect(findMapSpan(['m 100 0 h 511 v -111 h 159 v 175 h 206 v -127'])).toBe(
      976
    );
  });

  test('Regular map', () => {
    expect(
      findMapSpan([
        'm 0, 450 h 359 v -180 h 159 v 100 h 95 v 100 h 143 v -100 h 381 v -100 h 159 v 100 h 238 v -95 h 365 v -95 h 286 v -95 h 143 v 413 h 333 v -95 h 603 v 95 h 238 v -79 h 143 v 175 h 127 v -79 h 143 v -95 h 111 v 16 h 429 v -143 h 111 v 143 h 333 v -111 h 127 v 111 h 270 v 143 h 143 v -79 h 79 v -79 h 238 v -127 h 175 v 127 h 143 v -95 h 127 v 238 h 159 v -111 h 270 v -127 h 159 v 175 h 238 v -111 h 190 v 95 h 127 v -127 h 397 v -127 h 190 v 190 h 206 v -95 h 111 v 79 h 127 v -111 h 111 v 143 h 95 v -127 h 127 v 143 h 127 v -127 h 127 v 318 h 460 v -175 h 127 v 143 h 111 v -222 h 333 v -127 h 412 v -1000 h 500'
      ])
    ).toBe(10905);
  });

  test('One line', () => {
    expect(findMapSpan(['m 100 0 h 511'])).toBe(611);
  });

  test('Layered map', () => {
    expect(findMapSpan(['m 20 0 h 511', 'm 100 0 h 511'])).toBe(611);
  });
});

describe('buildMapHashtable tests', () => {
  test('Layered map', () => {
    const layeredMap = [
      [['h', 40], ['h', 70]],
      [['h', 40], ['h', 70]],
      [['h', 40], ['h', 70]],
      [['h', 40], ['h', 70]],
      [['h', 40], ['h', 70]],
      [['h', 40], ['h', 76]],
      [['h', 40], ['h', 76]],
      [['h', 40], ['h', 76]],
      [['h', 40]],
      [['h', 50]],
      [['h', 50]],
      [['h', 50]],
      [['h', 50]],
      [['h', 50]],
      [['h', 50]],
      [['h', 50]],
      [['h', 50]],
      [['h', 50]],
      [['h', 50]],
      [['h', 50]],
      [['h', 50]],
      [['h', 50]],
      [['h', 50]],
      [['h', 50]],
      [['h', 50]],
      [['h', 50]],
      [['h', 50]],
      [['h', 50]],
      [['h', 50]]
    ];

    expect(
      buildMapHashtable(29, 6, [
        'm 0 40 h 9 v 10 h 20 v 3',
        'm 0 70 h 5 v 6 h 3 v 3'
      ])
    ).toEqual(layeredMap);
  });

  test('Non-layered map width 6', () => {
    const nonLayeredMap6 = [
      [['h', 40]],
      [['h', 40]],
      [['h', 40]],
      [['h', 40]],
      [['h', 40]],
      [['h', 40]],
      [['h', 40]],
      [['h', 40]],
      [['h', 40]],
      [['h', 50]],
      [['h', 50]],
      [['h', 50]],
      [['h', 50]],
      [['h', 50]],
      [['h', 50]],
      [['h', 50]],
      [['h', 50]],
      [['h', 50]],
      [['h', 50]],
      [['h', 50]],
      [['h', 50]],
      [['h', 50]],
      [['h', 50]],
      [['h', 50]],
      [['h', 50]],
      [['h', 50]],
      [['h', 50]],
      [['h', 50]],
      [['h', 50]],
      [['h', 53]],
      [['h', 53]],
      [['h', 53]],
      [['h', 53]],
      [['h', 53]],
      [['h', 53]],
      [['h', 53]],
      [['h', 53]],
      [['h', 53]],
      [['h', 53]],
      [['h', 53]],
      [['h', 72]],
      [['h', 72]],
      [['h', 72]],
      [['h', 72]],
      [['h', 72]]
    ];

    expect(
      buildMapHashtable(45, 6, ['m 0 40 h 9 v 10 h 20 v 3 h 11 v 19 h 5 v 3'])
    ).toEqual(nonLayeredMap6);
  });

  test('Non-layered map width 10', () => {
    const nonLayeredMap10 = [
      [['h', 40]],
      [['h', 40]],
      [['h', 40]],
      [['h', 40]],
      [['h', 40]],
      [['h', 40]],
      [['h', 40]],
      [['h', 40]],
      [['h', 40]],
      [['h', 50]],
      [['h', 50]],
      [['h', 50]],
      [['h', 50]],
      [['h', 50]],
      [['h', 50]],
      [['h', 50]],
      [['h', 50]],
      [['h', 50]],
      [['h', 50]],
      [['h', 50]],
      [['h', 50]],
      [['h', 50]],
      [['h', 50]],
      [['h', 50]],
      [['h', 50]],
      [['h', 50]],
      [['h', 50]],
      [['h', 50]],
      [['h', 50]],
      [['h', 53]],
      [['h', 53]],
      [['h', 53]],
      [['h', 53]],
      [['h', 53]],
      [['h', 53]],
      [['h', 53]],
      [['h', 53]],
      [['h', 53]],
      [['h', 53]],
      [['h', 53]],
      [['h', 72]],
      [['h', 72]],
      [['h', 72]],
      [['h', 72]],
      [['h', 72]]
    ];

    expect(
      buildMapHashtable(45, 10, ['m 0 40 h 9 v 10 h 20 v 3 h 11 v 19 h 5 v 3'])
    ).toEqual(nonLayeredMap10);
  });
});
